//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.2

use color_eyre::eyre::Result;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use std::fmt::Debug;
use tracing::instrument;

/// Configuration rules for deadline generation in a league season
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "deadline_config_rule")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub league_id: i64,
    pub end_of_season_year: i16,
    pub preseason_keeper_deadline: DateTimeWithTimeZone,
    pub veteran_auction_days_after_keeper_deadline_duration: i16,
    pub fa_auction_days_duration: i16,
    pub final_roster_lock_deadline_days_after_rookie_draft: i16,
    pub playoffs_start_week: i16,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

impl Model {
    /// Get configuration rules for a specific league and season
    #[instrument]
    pub async fn get_config_rule_for_league_season<C>(
        league_id: i64,
        end_of_season_year: i16,
        db: &C,
    ) -> Result<Option<Model>>
    where
        C: ConnectionTrait + Debug,
    {
        let config = Entity::find()
            .filter(Column::LeagueId.eq(league_id))
            .filter(Column::EndOfSeasonYear.eq(end_of_season_year))
            .one(db)
            .await?;

        Ok(config)
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::league::Entity",
        from = "Column::LeagueId",
        to = "super::league::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    League,
}

impl Related<super::league::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::League.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
