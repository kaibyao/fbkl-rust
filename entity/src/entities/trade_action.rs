//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.2

use async_graphql::Enum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "trade_action")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub action_type: TradeActionType,
    pub team_user_id: i64,
    pub trade_id: i64,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

/// Represents the different types of actions that can be made by a team involved in a trade.
#[derive(
    Debug,
    Default,
    Clone,
    Copy,
    Enum,
    Eq,
    PartialEq,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
)]
#[sea_orm(rs_type = "i16", db_type = "Integer")]
pub enum TradeActionType {
    /// A trade is proposed by a team.
    #[default]
    #[sea_orm(num_value = 0)]
    Propose,
    /// A trade has been accepted by the responding team.
    #[sea_orm(num_value = 1)]
    Accept,
    /// A trade has been canceled by the proposing team.
    #[sea_orm(num_value = 2)]
    Cancel,
    /// A trade has been rejected by the responding team.
    #[sea_orm(num_value = 3)]
    Reject,
    /// A trade has been counter-offered by the responding team.
    #[sea_orm(num_value = 4)]
    Counteroffer,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::team_user::Entity",
        from = "Column::TeamUserId",
        to = "super::team_user::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    TeamUser,
    #[sea_orm(
        belongs_to = "super::trade::Entity",
        from = "Column::TradeId",
        to = "super::trade::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Trade,
}

impl Related<super::team_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamUser.def()
    }
}

impl Related<super::trade::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Trade.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
