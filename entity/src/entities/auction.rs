//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use async_graphql::Enum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "auction")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub auction_type: AuctionType,
    pub start_timestamp: DateTimeWithTimeZone,
    pub soft_end_timestamp: DateTimeWithTimeZone,
    pub fixed_end_timestamp: DateTimeWithTimeZone,
    pub contract_id: i64,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

/// Represents the different types of auctions on which owners can bid & win player contracts.
#[derive(
    Debug,
    Default,
    Clone,
    Copy,
    Enum,
    Eq,
    PartialEq,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
)]
#[sea_orm(rs_type = "i16", db_type = "Integer")]
pub enum AuctionType {
    /// Represents a free agent auction that happens throughout the league season.
    #[default]
    #[sea_orm(num_value = 0)]
    InSeasonFreeAgent,
    /// Represents an auction generated as part of the veteran auction during the league preseason.
    #[sea_orm(num_value = 1)]
    PreseasonVeteranAuction,
    /// Represents a free agent auction that happens during the league preseason. This is either during the open nomination period that immediately follows the veteran auction, or the week 1 free agent period.
    #[sea_orm(num_value = 2)]
    PreseasonFreeAgent,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::contract::Entity",
        from = "Column::ContractId",
        to = "super::contract::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Contract,
    #[sea_orm(has_many = "super::auction_bid::Entity")]
    AuctionBid,
    #[sea_orm(has_one = "super::transaction::Entity")]
    Transaction,
}

impl Related<super::contract::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Contract.def()
    }
}

impl Related<super::auction_bid::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuctionBid.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
