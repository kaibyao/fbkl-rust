//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.2

use async_graphql::Enum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

/// A Deadline is the date & time at which specific things happen over the course of a league season.
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "deadline")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub date_time: DateTimeWithTimeZone,
    pub deadline_type: DeadlineType,
    pub name: String,
    pub season_end_year: i16,
    pub league_id: i64,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

/// The different types of deadlines that happen in a league.
#[derive(
    Debug, Clone, Copy, Enum, Eq, PartialEq, EnumIter, DeriveActiveEnum, Serialize, Deserialize,
)]
#[sea_orm(rs_type = "i16", db_type = "Integer")]
pub enum DeadlineType {
    #[sea_orm(num_value = 0)]
    InSeasonLegalization,
    #[sea_orm(num_value = 1)]
    PreseasonKeeper,
    #[sea_orm(num_value = 2)]
    VeteranAuctionRfaStart,
    #[sea_orm(num_value = 3)]
    VeteranAuctionFaStart,
    #[sea_orm(num_value = 4)]
    RookieDraftStart,
    #[sea_orm(num_value = 5)]
    FreeAgentAuctionEnd,
    #[sea_orm(num_value = 6)]
    CapIncrease,
    #[sea_orm(num_value = 7)]
    TradeDeadline,
    #[sea_orm(num_value = 8)]
    SeasonEnd,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::league::Entity",
        from = "Column::LeagueId",
        to = "super::league::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    League,
    #[sea_orm(has_many = "super::transaction::Entity")]
    Transaction,
}

impl Related<super::league::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::League.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
