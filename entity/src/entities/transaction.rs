//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.2

use async_graphql::Enum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

/// A Transaction is any action taken by a user or the system that can change the state of a league or its teams.
/// Note that we are only recording final actions here; Intermediary actions (auction bids, trade actions) that by themselves do not change a team, contract, or the league are not recorded as a transaction.
/// Based on recorded transactions only, it should be possible to re-create the state of a league, even if intermediary data (bids, comments, trade actions that aren't the final trade state) is lost.
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "transaction")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub season_end_year: i16,
    /// Represents the different types of transactions that occur in a league.
    pub transaction_type: TransactionType,
    pub deadline_id: i64,
    pub league_id: i64,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

/// Represents the different types of transactions that occur in a league.
#[derive(
    Debug, Clone, Copy, Enum, Eq, PartialEq, EnumIter, DeriveActiveEnum, Serialize, Deserialize,
)]
#[sea_orm(rs_type = "i16", db_type = "Integer")]
pub enum TransactionType {
    /// The transaction is a trade between two teams.
    #[sea_orm(num_value = 0)]
    Trade,
    /// The transaction is the result of a team winning a player auction.
    #[sea_orm(num_value = 1)]
    AuctionDone,
    /// A team has updated their roster/settings. There is some overlap between team updates and transaction types. For these overlapped areas, the Transaction will be concerned with the action that caused the team update (auction, trade, etc.) while the Team Update will be concerned with the details (the contract being added via auction or trade, etc.).
    #[sea_orm(num_value = 2)]
    TeamUpdate,
    /// Pre-season keepers set (does this require a separate table?)
    #[sea_orm(num_value = 3)]
    PreseasonKeeper,
    /// A rookie player was selected during the rookie draft.
    #[sea_orm(num_value = 4)]
    RookieDraftSelection,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::deadline::Entity")]
    Deadline,
    #[sea_orm(
        belongs_to = "super::league::Entity",
        from = "Column::LeagueId",
        to = "super::league::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    League,
    #[sea_orm(has_many = "super::team_update::Entity")]
    TeamUpdate,
}

impl Related<super::deadline::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Deadline.def()
    }
}

impl Related<super::league::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::League.def()
    }
}

impl Related<super::team_update::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamUpdate.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
