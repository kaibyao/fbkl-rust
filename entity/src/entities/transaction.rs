//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.2

use async_graphql::Enum;
use color_eyre::{eyre::eyre, Result};
use sea_orm::{entity::prelude::*, ConnectionTrait, TransactionTrait};
use serde::{Deserialize, Serialize};

use crate::deadline;

/// A Transaction is any action taken by a user or the system that can change the state of a league or its teams.
/// Note that we are only recording final actions here; Intermediary actions (auction bids, trade actions) that by themselves do not change a team, contract, or the league are not recorded as a transaction.
/// Based on recorded transactions only, it should be possible to re-create the state of a league, even if intermediary data (bids, comments, trade actions that aren't the final trade state) is lost.
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "transaction")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub season_end_year: i16,
    /// Represents the different types of transactions that occur in a league.
    pub transaction_type: TransactionType,
    pub league_id: i64,
    // Represents the deadline to which this transaction is tied. The reason this is necessary is because transactions may "happen" immediately, but they aren't executed until the date & time of their associated deadline.
    pub deadline_id: i64,
    pub auction_id: Option<i64>,
    pub rookie_draft_selection_id: Option<i64>,
    pub trade_id: Option<i64>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

impl Model {
    pub async fn get_deadline<C>(&self, db: &C) -> Result<deadline::Model>
    where
        C: ConnectionTrait + TransactionTrait,
    {
        self.find_related(deadline::Entity)
            .one(db)
            .await?
            .ok_or_else(|| {
                eyre!(
                    "Could not find deadline associated with transaction ({})",
                    self.id
                )
            })
    }
}

/// Represents the different types of transactions that occur in a league.
#[derive(
    Debug, Clone, Copy, Enum, Eq, PartialEq, EnumIter, DeriveActiveEnum, Serialize, Deserialize,
)]
#[sea_orm(rs_type = "i16", db_type = "Integer")]
pub enum TransactionType {
    /// The transaction is a trade between two teams.
    #[sea_orm(num_value = 0)]
    Trade,
    /// The transaction is the result of a team winning a player auction.
    #[sea_orm(num_value = 1)]
    AuctionDone,
    /// Pre-season keepers set.
    #[sea_orm(num_value = 2)]
    PreseasonKeeper,
    /// A rookie player was selected during the rookie draft.
    #[sea_orm(num_value = 3)]
    RookieDraftSelection,
    /// A team has manually dropped a player contract.
    #[sea_orm(num_value = 4)]
    TeamUpdateDropContract,
    /// A team has moved a player contract to IR.
    #[sea_orm(num_value = 5)]
    TeamUpdateToIr,
    /// A team has moved a player contract from IR.
    #[sea_orm(num_value = 6)]
    TeamUpdateFromIr,
    /// A team has activated a rookie contract, converting them to a rookie extension.
    #[sea_orm(num_value = 7)]
    RookieContractActivation,
    /// A team has made a configuration change (ownership/name change).
    #[sea_orm(num_value = 8)]
    TeamUpdateConfigChange,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::auction::Entity")]
    Auction,
    #[sea_orm(
        belongs_to = "super::deadline::Entity",
        from = "Column::DeadlineId",
        to = "super::deadline::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Deadline,
    #[sea_orm(
        belongs_to = "super::league::Entity",
        from = "Column::LeagueId",
        to = "super::league::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    League,
    #[sea_orm(has_one = "super::rookie_draft_selection::Entity")]
    RookieDraftSelection,
    #[sea_orm(has_many = "super::team_update::Entity")]
    TeamUpdate,
    #[sea_orm(has_one = "super::trade::Entity")]
    Trade,
}

impl Related<super::auction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Auction.def()
    }
}

impl Related<super::deadline::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Deadline.def()
    }
}

impl Related<super::league::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::League.def()
    }
}

impl Related<super::rookie_draft_selection::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RookieDraftSelection.def()
    }
}

impl Related<super::team_update::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamUpdate.def()
    }
}

impl Related<super::trade::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Trade.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
