//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use async_graphql::Enum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "team_update_contract")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub update_type: UpdateType,
    pub team_update_id: i64,
    pub contract_id: i64,
}

/// Represents the different types of updates that can happen to a contract on a team.
#[derive(
    Debug, Clone, Copy, Enum, Eq, PartialEq, EnumIter, DeriveActiveEnum, Serialize, Deserialize,
)]
#[sea_orm(rs_type = "i16", db_type = "Integer")]
pub enum UpdateType {
    /// A contract is dropped from a team.
    #[sea_orm(num_value = 0)]
    Drop,
    /// A contract is traded to another team.
    #[sea_orm(num_value = 1)]
    TradedAway,
    /// A contract is added to a team via trade.
    #[sea_orm(num_value = 2)]
    AddViaTrade,
    /// A contract is added to a team via auction.
    #[sea_orm(num_value = 3)]
    AddViaAuction,
    /// A contract is added via rookie draft selection.
    #[sea_orm(num_value = 4)]
    AddViaRookieDraft,
    /// A contract representing a rookie is activated.
    #[sea_orm(num_value = 5)]
    ActivateRookie,
    /// A contract is updated to IR status.
    #[sea_orm(num_value = 6)]
    ToIR,
    /// A contract is updated to no longer have IR status.
    #[sea_orm(num_value = 7)]
    FromIR,
    /// A contract is kept on the team for the Keeper Deadline.
    #[sea_orm(num_value = 8)]
    Keeper,
    /// A contract is advanced by one year.
    #[sea_orm(num_value = 9)]
    ContractAdvanced,
    /// A contract is lost to another team via Free Agency (in the Veteran Auction).
    #[sea_orm(num_value = 10)]
    LostViaFreeAgency,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::contract::Entity",
        from = "Column::ContractId",
        to = "super::contract::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Contract,
    #[sea_orm(
        belongs_to = "super::team_update::Entity",
        from = "Column::TeamUpdateId",
        to = "super::team_update::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    TeamUpdate,
}

impl Related<super::contract::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Contract.def()
    }
}

impl Related<super::team_update::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamUpdate.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
