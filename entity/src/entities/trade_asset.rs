//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.2

use std::fmt::Debug;

use async_graphql::Enum;
use async_trait::async_trait;
use color_eyre::{
    eyre::{ensure, eyre},
    Result,
};
use sea_orm::{entity::prelude::*, ActiveValue};
use serde::{Deserialize, Serialize};
use tracing::instrument;

use crate::{contract, draft_pick, draft_pick_option, team};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "trade_asset")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub asset_type: TradeAssetType,
    pub draft_pick_option_id: Option<i64>,
    pub contract_id: Option<i64>,
    pub draft_pick_id: Option<i64>,
    pub from_team_id: i64,
    pub to_team_id: i64,
    pub trade_id: i64,
}

impl Model {
    /// Creates a not-yet-persisted Trade Asset `ActiveModel`from a player contract.
    pub fn from_contract(
        trade_id: Option<i64>,
        contract_id: i64,
        from_team_id: i64,
        to_team_id: i64,
    ) -> ActiveModel {
        ActiveModel {
            id: ActiveValue::NotSet,
            asset_type: ActiveValue::Set(TradeAssetType::Contract),
            contract_id: ActiveValue::Set(Some(contract_id)),
            draft_pick_id: ActiveValue::NotSet,
            draft_pick_option_id: ActiveValue::NotSet,
            from_team_id: ActiveValue::Set(from_team_id),
            to_team_id: ActiveValue::Set(to_team_id),
            trade_id: trade_id.map_or(ActiveValue::NotSet, ActiveValue::Set),
        }
    }

    /// Retrieves the contract related to the trade asset, assuming that its `TradeAssetType` is `Contract`.
    #[instrument]
    pub async fn get_contract<C>(&self, db: &C) -> Result<contract::Model>
    where
        C: ConnectionTrait + Debug,
    {
        ensure!(self.asset_type == TradeAssetType::Contract, "Cannot retrieve a related contract for a trade asset whose type is not `Contract`. (id = {}, asset type = {:?})", self.id, self.asset_type);

        let maybe_contract = self.find_related(contract::Entity).one(db).await?;

        maybe_contract.ok_or_else(|| {
            eyre!(
                "Could not find contract related to trade asset: {}",
                self.id
            )
        })
    }

    /// Retrieves the draft pick related to the trade asset, assuming that its `TradeAssetType` is `DraftPick`.
    #[instrument]
    pub async fn get_draft_pick<C>(&self, db: &C) -> Result<draft_pick::Model>
    where
        C: ConnectionTrait + Debug,
    {
        ensure!(self.asset_type == TradeAssetType::DraftPick, "Cannot retrieve a related draft pick for a trade asset whose type is not `DraftPick`. (id = {}, asset type = {:?})", self.id, self.asset_type);

        let maybe_draft_pick = self.find_related(draft_pick::Entity).one(db).await?;

        maybe_draft_pick.ok_or_else(|| {
            eyre!(
                "Could not find draft pick related to trade asset: {}",
                self.id
            )
        })
    }

    /// Retrieves the draft pick option related to the trade asset, assuming that its `TradeAssetType` is `DraftPickOption`.
    #[instrument]
    pub async fn get_draft_pick_option<C>(&self, db: &C) -> Result<draft_pick_option::Model>
    where
        C: ConnectionTrait + Debug,
    {
        ensure!(self.asset_type == TradeAssetType::DraftPickOption, "Cannot retrieve a related draft pick option for a trade asset whose type is not `DraftPickOption`. (id = {}, asset type = {:?})", self.id, self.asset_type);

        let maybe_draft_pick_option = self.find_related(draft_pick_option::Entity).one(db).await?;

        maybe_draft_pick_option.ok_or_else(|| {
            eyre!(
                "Could not find draft pick option related to trade asset: {}",
                self.id
            )
        })
    }
}

/// Represents the different types of assets (contracts, draft picks, etc.) that can be traded.
#[derive(
    Debug,
    Default,
    Clone,
    Copy,
    Enum,
    Eq,
    PartialEq,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
)]
#[sea_orm(rs_type = "i16", db_type = "Integer")]
pub enum TradeAssetType {
    #[default]
    #[sea_orm(num_value = 0)]
    Contract,
    #[sea_orm(num_value = 1)]
    DraftPick,
    #[sea_orm(num_value = 2)]
    DraftPickOption,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::contract::Entity",
        from = "Column::ContractId",
        to = "super::contract::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Contract,
    #[sea_orm(
        belongs_to = "super::draft_pick::Entity",
        from = "Column::DraftPickId",
        to = "super::draft_pick::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    DraftPick,
    #[sea_orm(has_one = "super::draft_pick_option::Entity")]
    DraftPickOption,
    #[sea_orm(
        belongs_to = "super::team::Entity",
        from = "Column::FromTeamId",
        to = "super::team::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    FromTeam,
    #[sea_orm(
        belongs_to = "super::team::Entity",
        from = "Column::ToTeamId",
        to = "super::team::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ToTeam,
    #[sea_orm(
        belongs_to = "super::trade::Entity",
        from = "Column::TradeId",
        to = "super::trade::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Trade,
}

impl Related<super::contract::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Contract.def()
    }
}

impl Related<super::draft_pick::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DraftPick.def()
    }
}

impl Related<super::draft_pick_option::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DraftPickOption.def()
    }
}

impl Related<super::trade::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Trade.def()
    }
}

#[derive(Debug)]
pub struct FromTeam;
impl Linked for FromTeam {
    type FromEntity = Entity;
    type ToEntity = team::Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![Relation::FromTeam.def()]
    }
}

#[derive(Debug)]
pub struct ToTeam;
impl Linked for ToTeam {
    type FromEntity = Entity;
    type ToEntity = team::Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![Relation::ToTeam.def()]
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(self, _db: &C, _insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        validate_trade_asset_for_contract(&self)?;
        validate_trade_asset_for_draft_pick(&self)?;
        validate_trade_asset_for_draft_pick_option(&self)?;

        Ok(self)
    }
}

fn validate_trade_asset_for_contract(model: &ActiveModel) -> Result<(), DbErr> {
    if !model.asset_type.as_ref().eq(&TradeAssetType::Contract) {
        return Ok(());
    }

    if model.draft_pick_option_id.is_set() {
        return Err(DbErr::Custom(format!("A trade asset of type=Contract should not have a draft pick option. Team: {}. Contract id: {:?}", model.from_team_id.as_ref(), model.contract_id.as_ref())));
    }

    if model.contract_id.is_not_set() {
        return Err(DbErr::Custom(format!(
            "A trade asset of type=Contract requires a contract id. Team: {}.",
            model.from_team_id.as_ref()
        )));
    }

    if model.draft_pick_id.is_set() {
        return Err(DbErr::Custom(format!("A trade asset of type=Contract should not have a draft pick. Team: {}. Contract id: {:?}", model.from_team_id.as_ref(), model.contract_id.as_ref())));
    }

    Ok(())
}

fn validate_trade_asset_for_draft_pick(model: &ActiveModel) -> Result<(), DbErr> {
    if !model.asset_type.as_ref().eq(&TradeAssetType::DraftPick) {
        return Ok(());
    }

    if model.draft_pick_option_id.is_set() {
        return Err(DbErr::Custom(format!("A trade asset of type=DraftPick should not have a draft pick option. Team: {}. Draft pick id: {:?}", model.from_team_id.as_ref(), model.draft_pick_id.as_ref())));
    }

    if model.contract_id.is_set() {
        return Err(DbErr::Custom(format!("A trade asset of type=DraftPick should not have a contract. Team: {}. Draft pick id: {:?}", model.from_team_id.as_ref(), model.draft_pick_id.as_ref())));
    }

    if model.draft_pick_id.is_not_set() {
        return Err(DbErr::Custom(format!(
            "A trade asset of type=DraftPick requires a draft pick id. Team: {}.",
            model.from_team_id.as_ref()
        )));
    }

    Ok(())
}

fn validate_trade_asset_for_draft_pick_option(model: &ActiveModel) -> Result<(), DbErr> {
    if !model
        .asset_type
        .as_ref()
        .eq(&TradeAssetType::DraftPickOption)
    {
        return Ok(());
    }

    if model.draft_pick_id.is_set() {
        return Err(DbErr::Custom(format!(
            "A trade asset of type=DraftPickOption should not have a draft pick id (redundant with draft_pick_option.draft_pick_id). Team: {}.",
            model.from_team_id.as_ref()
        )));
    }

    if model.draft_pick_option_id.is_not_set() {
        return Err(DbErr::Custom(format!("A trade asset of type=DraftPickOption requires a draft pick option to be set. Team: {}. Draft pick id: {:?}", model.from_team_id.as_ref(), model.draft_pick_id.as_ref())));
    }

    if model.contract_id.is_set() {
        return Err(DbErr::Custom(format!("A trade asset of type=DraftPickOption should not have a contract. Team: {}. Draft pick id: {:?}", model.from_team_id.as_ref(), model.draft_pick_id.as_ref())));
    }

    Ok(())
}
