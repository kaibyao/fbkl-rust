//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.2

use async_graphql::Enum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "trade")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub season_end_year: i16,
    pub status: TradeStatus,
    pub league_id: i64,
    pub from_team_id: i64,
    pub to_team_id: i64,
    pub original_trade_id: Option<i64>,
    pub previous_trade_id: Option<i64>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

/// Represents the different types of contract to which a player can be signed. When a player is signed to a team, their contract must be of one of these types.
#[derive(
    Debug,
    Default,
    Clone,
    Copy,
    Enum,
    Eq,
    PartialEq,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
)]
#[sea_orm(rs_type = "i16", db_type = "Integer")]
pub enum TradeStatus {
    /// Trade has been proposed (default).
    #[default]
    #[sea_orm(num_value = 0)]
    Proposed,
    /// Trade has been accepted.
    #[sea_orm(num_value = 1)]
    Accepted,
    /// Trade has been canceled by the proposing team.
    #[sea_orm(num_value = 2)]
    Canceled,
    /// Trade has been rejected by the responding team.
    #[sea_orm(num_value = 3)]
    Rejected,
    /// Trade has been counter-offered by the responding team.
    #[sea_orm(num_value = 4)]
    Counteroffered,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::league::Entity",
        from = "Column::LeagueId",
        to = "super::league::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    League,
    #[sea_orm(
        belongs_to = "super::team::Entity",
        from = "Column::FromTeamId",
        to = "super::team::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    FromTeam,
    #[sea_orm(
        belongs_to = "super::team::Entity",
        from = "Column::ToTeamId",
        to = "super::team::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ToTeam,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::OriginalTradeId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    OriginalTrade,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::PreviousTradeId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PreviousTrade,
    #[sea_orm(has_many = "super::trade_action::Entity")]
    TradeAction,
    #[sea_orm(has_many = "super::trade_asset::Entity")]
    TradeAsset,
    #[sea_orm(has_one = "super::transaction::Entity")]
    Transaction,
}

impl Related<super::league::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::League.def()
    }
}

impl Related<super::trade_action::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TradeAction.def()
    }
}

impl Related<super::trade_asset::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TradeAsset.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}

#[derive(Debug)]
pub struct OriginalTrade;
impl Linked for OriginalTrade {
    type FromEntity = Entity;
    type ToEntity = Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![Relation::OriginalTrade.def()]
    }
}

#[derive(Debug)]
pub struct PreviousTrade;
impl Linked for PreviousTrade {
    type FromEntity = Entity;
    type ToEntity = Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![Relation::PreviousTrade.def()]
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn before_save(self, insert: bool) -> Result<Self, DbErr> {
        non_original_trade_requires_previous_trade(&self)?;
        original_trade_requires_unset_previous_trade(&self)?;

        if !insert {
            update_requires_original_trade(&self)?;
        }

        Ok(self)
    }
}

fn non_original_trade_requires_previous_trade(model: &ActiveModel) -> Result<(), DbErr> {
    if model.previous_trade_id.is_not_set()
        && model.original_trade_id.is_set()
        && model.original_trade_id.as_ref().as_ref().unwrap() != model.id.as_ref()
    {
        Err(DbErr::Custom(format!("This trade (id={}, original_trade_id={:?}) is missing a reference to the previous trade for this player.", model.id.as_ref(), model.original_trade_id.as_ref())))
    } else {
        Ok(())
    }
}

fn original_trade_requires_unset_previous_trade(model: &ActiveModel) -> Result<(), DbErr> {
    if model.previous_trade_id.is_set()
        && model.original_trade_id.is_set()
        && model.original_trade_id.as_ref().as_ref().unwrap() == model.id.as_ref()
    {
        Err(DbErr::Custom(format!("This trade (id={}, original_trade_id={:?}, previous_trade_id={:?}) is supposedly the original (id and original id are matching), yet a previous trade id is referenced.", model.id.as_ref(), model.original_trade_id.as_ref(), model.previous_trade_id.as_ref())))
    } else {
        Ok(())
    }
}

fn update_requires_original_trade(model: &ActiveModel) -> Result<(), DbErr> {
    if model.original_trade_id.is_not_set() {
        Err(DbErr::Custom(format!(
            "This trade (id={}) requires original_trade_id to be set before it can be saved.",
            model.id.as_ref()
        )))
    } else {
        Ok(())
    }
}
