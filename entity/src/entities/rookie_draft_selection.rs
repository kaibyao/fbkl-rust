//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use async_graphql::Enum;
use sea_orm::{entity::prelude::*, ActiveValue};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "rookie_draft_selection")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub order: i16,
    pub status: RookieDraftSelectionStatus,
    pub contract_id: Option<i64>,
    pub draft_pick_id: i64,
    pub league_id: i64,
}

impl Model {
    pub fn from_rookie_contract(
        league_id: i64,
        contract_id: i64,
        draft_pick_id: i64,
        order: i16,
    ) -> ActiveModel {
        ActiveModel {
            id: ActiveValue::NotSet,
            order: ActiveValue::Set(order),
            status: ActiveValue::Set(RookieDraftSelectionStatus::PlayerSelected),
            contract_id: ActiveValue::Set(Some(contract_id)),
            draft_pick_id: ActiveValue::Set(draft_pick_id),
            league_id: ActiveValue::Set(league_id),
        }
    }
}

#[derive(
    Debug,
    Default,
    Clone,
    Copy,
    Eq,
    PartialEq,
    Enum,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
)]
#[sea_orm(rs_type = "String", db_type = "String(None)")]
pub enum RookieDraftSelectionStatus {
    /// Draft pick has not been used or skipped yet.
    #[default]
    #[sea_orm(string_value = "Unused")]
    Unused,
    /// Draft pick was used on a player selection.
    #[sea_orm(string_value = "PlayerSelected")]
    PlayerSelected,
    /// Draft pick was skipped/passed.
    #[sea_orm(string_value = "Skipped")]
    Skipped,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::draft_pick::Entity",
        from = "Column::DraftPickId",
        to = "super::draft_pick::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    DraftPick,
    #[sea_orm(
        belongs_to = "super::league::Entity",
        from = "Column::LeagueId",
        to = "super::league::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    League,
    #[sea_orm(
        belongs_to = "super::contract::Entity",
        from = "Column::ContractId",
        to = "super::contract::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Contract,
    #[sea_orm(has_one = "super::transaction::Entity")]
    Transaction,
}

impl Related<super::contract::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Contract.def()
    }
}

impl Related<super::draft_pick::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DraftPick.def()
    }
}

impl Related<super::league::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::League.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
